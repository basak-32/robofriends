{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/robots.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robots","CardArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAbF,SAACC,GACV,OACI,yBAAKC,UAAU,wDACX,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,iBAAmDC,IAAI,WAC/D,6BACI,4BAAMJ,EAAMK,MACZ,2BAAKL,EAAMM,OACX,2BAAKN,EAAMG,OCYZI,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OACI,kBAAC,EAAD,CACAC,IAAKL,EAAOI,GAAGT,GACfA,GAAIK,EAAOI,GAAGT,GACdE,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,WAIzB,OACI,6BACKG,ICDEK,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKf,UAAU,OACX,2BACAA,UAAU,mCACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCTTR,EAAS,CAClB,CACIL,GAAI,EACJE,KAAM,eACNe,SAAU,OACVd,MAAO,qBAEX,CACIH,GAAI,EACJE,KAAM,YACNe,SAAU,OACVd,MAAO,gBAEX,CACIH,GAAI,EACJE,KAAM,aACNe,SAAU,QACVd,MAAO,kBAEX,CACIH,GAAI,EACJE,KAAM,UACNe,SAAU,OACVd,MAAO,iBAEX,CACIH,GAAI,EACJE,KAAM,MACNe,SAAU,QACVd,MAAO,iBAEX,CACIH,GAAI,EACJE,KAAM,MACNe,SAAU,QACVd,MAAO,gBAEX,CACIH,GAAI,EACJE,KAAM,QACNe,SAAU,OACVd,MAAO,iBAEX,CACIH,GAAI,EACJE,KAAM,SACNe,SAAU,SACVd,MAAO,oBAEX,CACIH,GAAI,EACJE,KAAM,OACNe,SAAU,OACVd,MAAO,mBAEX,CACIH,GAAI,GACJE,KAAM,QACNe,SAAU,OACVd,MAAO,mBAEX,CACIH,GAAI,GACJE,KAAM,UACNe,SAAU,SACVd,MAAO,kBAEX,CACIH,GAAI,GACJE,KAAM,SACNe,SAAU,SACVd,MAAO,iBC7DAe,EARA,SAACrB,GACZ,OACI,yBAAKsB,MAAO,CAACC,SAAU,SAAUC,OAAO,kBAAmBC,OAAQ,UAC9DzB,EAAM0B,WC+BJC,G,wDA5BX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAP1C,EAAKC,MAAQ,CACTzB,OAAQA,EACRO,YAAa,IAJP,E,qDAYJ,IAAD,OACCmB,EAAiBC,KAAKF,MAAMzB,OAAO4B,QAAO,SAAAC,GAC5C,OAAOA,EAAMhC,KAAKiC,cAAcC,SAAS,EAAKN,MAAMlB,YAAYuB,kBAEpE,OACI,yBAAKrC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWe,aAAcmB,KAAKP,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpB,OAAQ0B,U,GAtBpBM,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0fe5fa75.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className='stc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${props.id}?size=200x200`} alt='robots' />\r\n            <div>\r\n                <h2>{ props.name }</h2>\r\n                <p>{ props.email }</p>\r\n                <p>{ props.id }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const CardArray = robots.map((user, i) => {\r\n        return (\r\n            <Card \r\n            key={robots[i].id} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email} \r\n            />\r\n        );\r\n    })\r\n    return (\r\n        <div>\r\n            {CardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots'\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","export const robots = [\r\n    {\r\n        id: 1,\r\n        name: 'Lanne Graham',\r\n        username: 'Bret',\r\n        email: 'sincere@april.biz'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Sally Hom',\r\n        username: 'Huil',\r\n        email: 'lisa@home.tv'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Kelly John',\r\n        username: 'molly',\r\n        email: 'ham@snipper.mn'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Britain',\r\n        username: 'John',\r\n        email: 'jesus@kill.in'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Cat',\r\n        username: 'Kitty',\r\n        email: 'abc@gmail.com'\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Dod',\r\n        username: 'Puppy',\r\n        email: 'puppy@dod.co'\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Horse',\r\n        username: 'hett',\r\n        email: 'stable@in.cov'\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Parrot',\r\n        username: 'lovely',\r\n        email: 'parrot@gmail.com'\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Lion',\r\n        username: 'Hero',\r\n        email: 'den@yesenia.net'\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Tiger',\r\n        username: 'King',\r\n        email: 'ceaser@kory.org'\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'Peacock',\r\n        username: 'beauty',\r\n        email: 'beauty@ful.com'\r\n    },\r\n    {\r\n        id: 12,\r\n        name: 'Monkey',\r\n        username: 'hamper',\r\n        email: 'cage@city.in'\r\n    }\r\n]","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', border:'1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { robots } from '../components/robots';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <CardList robots={filteredRobots} />\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}